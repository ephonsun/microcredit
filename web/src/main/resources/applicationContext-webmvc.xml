<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
		   xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
		   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
		   xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.0.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 定义无需Controller的url<->view直接映射 -->
	<!--<mvc:view-controller path="/" view-name="redirect:/login"/>-->
	<mvc:annotation-driven />
	<mvc:default-servlet-handler/>
	<context:component-scan base-package="banger"/>

	<!-- 自动拦截 -->
	<aop:aspectj-autoproxy />

	<!--事务拦务-->
	<bean id="sqlTransactionAspect" class="banger.common.aspect.SqlTransactionAspect" ></bean>

	<!-- 自定义字段保存，拦截 -->
	<bean id="dataDaoAspect" class="banger.common.aspect.DataDaoAspect" ></bean>

<!--
	<mvc:resources location="" mapping="/image/**"/>
	<mvc:resources location="/css/" mapping="/css/**"/>
	<mvc:resources location="/js/" mapping="/js/**"/>-->

	<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		  class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" /><!-- json转换器 -->
			</list>
		</property>
	</bean>

	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 p:prefix中模板放置路径 -->
	<bean id="velocityConfig"
		  class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
		<property name="resourceLoaderPath" value="/" />
		<property name="configLocation" value="classpath:velocity.properties" />
		<property name="velocityProperties">
			<props>
				<prop  key="input.encoding">UTF-8</prop>
				<prop  key="output.encoding">UTF-8</prop>
			</props>
		</property>
	</bean>

	<bean id="viewResolver"
		  class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
		<property name="prefix" value="/" /><!-- 视图文件的前缀，即存放的路径 -->
		<property name="suffix" value=".vm" /><!-- 视图文件的后缀名 -->
		<property name="toolboxConfigLocation" value="/WEB-INF/classes/toolbox.xml" /><!--toolbox配置文件路径-->
		<property name="dateToolAttribute" value="date" /><!--日期函数名称-->
		<property name="numberToolAttribute" value="number" /><!--数字函数名称-->
		<property name="contentType" value="text/html;charset=UTF-8" />
		<property name="exposeSpringMacroHelpers" value="true" /><!--是否使用spring对宏定义的支持-->
		<property name="exposeRequestAttributes" value="true" /><!--是否开放request属性-->
		<property name="requestContextAttribute" value="rc"/><!--request属性引用名称-->
		<!--<property name="layoutUrl" value="layout/default.vm"/>&lt;!&ndash;指定layout文件&ndash;&gt;-->
		<property name="cache" value="false" />

	</bean>

	<bean id="springContextUtil" class="banger.common.listener.SpringContextUtil"/>

	<!-- 自动扫描且只扫描@Controller -->
	<!-- <context:component-scan base-package="org.itboys.portal.web.controller,
	com.hz.sunday.newshop.controller.web,com.defa.logistics.controller" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan> -->

	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>
			<!-- 将Jackson2HttpMessageConverter的默认格式化输出设为true -->
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="prettyPrint" value="true"/>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="mediaTypes" >
			<value>
				json=application/json
				xml=application/xml
			</value>
		</property>
	</bean>

	<!--配置拦截器, 多个拦截器,顺序执行 -->
	<mvc:interceptors>
		<!--<mvc:interceptor>-->
			<!--&lt;!&ndash; 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller &ndash;&gt;-->
			<!--<mvc:mapping path="/**" />-->
			<!--<bean class="banger.common.interceptor.HeaderTokenInterceptor"></bean>-->
		<!--</mvc:interceptor>-->
		<mvc:interceptor>
			<!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->
			<mvc:mapping path="/**" />
			<bean class="banger.common.interceptor.DataPermitInterceptor"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->
			<mvc:mapping path="/**" />
			<bean class="banger.common.interceptor.ParamInterceptor"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->
			<mvc:mapping path="/**" />
<!--			<mvc:exclude-mapping path="/login/**"/>
			<mvc:exclude-mapping path="/timeoutform"/>-->
			<bean class="banger.common.interceptor.ActionInterceptor"></bean>
		</mvc:interceptor>
		<!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->
	</mvc:interceptors>

	<bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="104857600"></property>
		<property name="maxInMemorySize"  value="104857600"></property>

		<property name="defaultEncoding" value="utf-8"/>
	</bean>
	
	<context:property-placeholder location="classpath:globalConfig.properties,classpath:modules.properties,classpath:function.properties" />

</beans>
